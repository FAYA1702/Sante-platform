"""Script de migration pour ajouter les d√©partements et enrichir les utilisateurs existants.
Migration douce qui pr√©serve toutes les donn√©es existantes.
"""

import asyncio
from datetime import datetime
from beanie import init_beanie
from motor.motor_asyncio import AsyncIOMotorClient
from ..models import Department, Utilisateur
from ..settings import MONGODB_URL, DATABASE_NAME


async def create_default_departments():
    """Cr√©er les d√©partements par d√©faut."""
    departments_data = [
        {
            "name": "M√©decine G√©n√©rale",
            "code": "GENERAL",
            "description": "M√©decine g√©n√©rale et soins de premi√®re ligne"
        },
        {
            "name": "Cardiologie",
            "code": "CARDIO",
            "description": "Sp√©cialit√© des maladies cardiovasculaires"
        },
        {
            "name": "Ophtalmologie",
            "code": "OPHTALMO",
            "description": "Sp√©cialit√© des maladies des yeux"
        },
        {
            "name": "Odontologie",
            "code": "DENTAIRE",
            "description": "Soins dentaires et chirurgie buccale"
        },
        {
            "name": "P√©diatrie",
            "code": "PEDIATRIE",
            "description": "M√©decine des enfants et adolescents"
        },
        {
            "name": "Dermatologie",
            "code": "DERMATO",
            "description": "Sp√©cialit√© des maladies de la peau"
        }
    ]
    
    created_departments = []
    for dept_data in departments_data:
        # V√©rifier si le d√©partement existe d√©j√†
        existing = await Department.find_one({"code": dept_data["code"]})
        if not existing:
            department = Department(**dept_data)
            await department.insert()
            created_departments.append(department)
            print(f"‚úÖ D√©partement cr√©√©: {department.name} ({department.code})")
        else:
            created_departments.append(existing)
            print(f"‚ÑπÔ∏è  D√©partement existant: {existing.name} ({existing.code})")
    
    return created_departments


async def migrate_existing_users(departments):
    """Migrer les utilisateurs existants sans d√©partement."""
    # Trouver le d√©partement "M√©decine G√©n√©rale" par d√©faut
    general_dept = next((d for d in departments if d.code == "GENERAL"), None)
    if not general_dept:
        print("‚ùå D√©partement 'M√©decine G√©n√©rale' non trouv√©")
        return
    
    # Migrer les m√©decins sans d√©partement
    medecins_sans_dept = await Utilisateur.find({
        "role": "medecin",
        "department_id": None
    }).to_list()
    
    for medecin in medecins_sans_dept:
        medecin.department_id = str(general_dept.id)
        medecin.updated_at = datetime.utcnow()
        await medecin.save()
        print(f"‚úÖ M√©decin assign√© √† M√©decine G√©n√©rale: {medecin.username}")
    
    # Les patients restent sans d√©partement (assignation √† la demande)
    patients_count = await Utilisateur.find({"role": "patient"}).count()
    print(f"‚ÑπÔ∏è  {patients_count} patients conservent leur statut (assignation √† la demande)")
    
    # Statistiques finales
    admins_count = await Utilisateur.find({"role": "admin"}).count()
    techniciens_count = await Utilisateur.find({"role": "technicien"}).count()
    
    print(f"‚ÑπÔ∏è  {admins_count} admins et {techniciens_count} techniciens (acc√®s global)")


async def main():
    """Fonction principale de migration."""
    print("üöÄ D√©but de la migration des d√©partements...")
    
    # Connexion √† MongoDB
    client = AsyncIOMotorClient(MONGODB_URL)
    database = client[DATABASE_NAME]
    
    # Initialiser Beanie avec tous les mod√®les
    from ..models import Device, Donnee, Alerte, Recommandation
    await init_beanie(
        database=database,
        document_models=[
            Utilisateur, Device, Donnee, Alerte, Recommandation,
            Department  # Nouveau mod√®le
        ]
    )
    
    try:
        # √âtape 1: Cr√©er les d√©partements par d√©faut
        print("\nüìã √âtape 1: Cr√©ation des d√©partements...")
        departments = await create_default_departments()
        
        # √âtape 2: Migrer les utilisateurs existants
        print("\nüë• √âtape 2: Migration des utilisateurs existants...")
        await migrate_existing_users(departments)
        
        print("\n‚úÖ Migration termin√©e avec succ√®s!")
        print(f"   - {len(departments)} d√©partements disponibles")
        print("   - M√©decins assign√©s au d√©partement M√©decine G√©n√©rale")
        print("   - Patients pr√™ts pour assignation √† la demande")
        print("   - Toutes les donn√©es existantes pr√©serv√©es")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la migration: {e}")
        raise
    finally:
        client.close()


if __name__ == "__main__":
    asyncio.run(main())
